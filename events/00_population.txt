add_namespace = population

news_event = {
	id = population.0
	picture = GFX_report_event_election_vote
	
	is_triggered_only = yes

    hidden = yes

	immediate = {

    set_variable = {
        var = global.global_pop
        value = 0
    }

    set_variable = {
        var = global.global_industrial_pop
        value = 0
    }

    set_variable = {
        var = global.global_agrarian_pop
        value = 0
    }

        every_country = {

        	set_variable = {
        		var = total_population
        		value = 0
        	}

            every_owned_state = {
                #Get the state's population
                set_variable = {
                    var = var_state_population
                    value = state_population
                }

                #Check if the number has overflowed. If it has overflowed, it will have a decimal point value
               	#So do mod 1 to see if there's a decimal point value
               	#Easy way of doing this in PDox script is creating a temp variable that is a rounded version of
               	#the variable you want to do a mod function on, and seeing if it's lower than the unrounded one.

                #You need to also check if it's overflowed twice.
                #This requires a slightly more sensitive mod 1 function
                #See what the decimal point value actually _is_, and decide from that how many times it's overflowed
                #ALTERNATIVELY, if it has a decimal point value AND is positive, it's overflowed twice. That would also be fine
               	set_variable = {
               		var = mod_one_state_population
               		value = var_state_population
               	}
               	round_variable = mod_one_state_population

                set_variable = {
                    var = floating_point_value_state_pop
                    value = var_state_population
                }

                #Get the floating point value of the integer. This is the key indicator as to how many times the value has
                #overflowed
                subtract_from_variable = {
                    var = floating_point_value_state_pop
                    value = mod_one_state_population
                }        


                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = -0.296
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 1
                    }
                }
                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = 0.704
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 2
                    }
                }
                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = -0.592
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 2
                    }
                }
                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = 0.408
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 2
                    }
                }
                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = -0.888
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 3
                    }
                }
                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = 0.112
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 3
                    }
                }
                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = -0.184
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 3
                    }
                }
                if = {
                    limit = {
                        check_variable = {
                            var = floating_point_value_state_pop
                            value = -0.48
                            compare = equals
                        }
                    }
                    set_variable = {
                        var = pop_overflow_counter
                        value = 3
                    }
                }


                if = {
                	limit = {
	                	check_variable = {
		                	var = var_state_population
		                	value = mod_one_state_population
		                	compare = not_equals
	               		}
                	}
                	set_variable = {
                		var = var_overflow_warning
                		value = 1
                	}
                }
                #Make the number easier to handle without risk of overflow at 2^31
                multiply_variable = {
                	var = var_state_population
                	value = 0.01
               	}

               	#Check if the value has suffered an overflow due to going over a value of 2^31
                if = {
                	limit = {
                		check_variable = {
                			var = var_overflow_warning
                			value = 1
                			compare = equals
                		}
                	}
                	#If variable is negative, make it positive
                	if = {
                		limit = {
                			check_variable = {
                				var = var_state_population
                				value = 0
                				compare = less_than
                			}
                		}
	                	multiply_variable = {
	                		var = var_state_population
	                		value = -1
	                	}
                	}
                	#Create a temporary variable to find the difference that we need to add to make the numbers equivalent
                	set_temp_variable = {
                		var = temp_var_overflow_difference
                		value = var_state_population
                	}

                	#Subtract (((2^31) -1) x 0.01)
                	subtract_from_temp_variable = {
                		var = temp_var_overflow_difference
                		value = 21474.83
                	}

                	#Multiply the result by two
                	multiply_temp_variable = {
                		var = temp_var_overflow_difference
                		value = 2
                	}

                	#If the difference is negative, make it positive
                	if = {
                		limit = {
                			check_variable = {
                				var = temp_var_overflow_difference
                				value = 0
                				compare = less_than
                			}
                		}
                		multiply_temp_variable = {
                			var = temp_var_overflow_difference
                			value = -1
                		}
                        multiply_temp_variable = {
                            var = temp_var_overflow_difference
                            value = pop_overflow_counter
                        }
                	}

                	Add the result to the var_state_population total
                	add_to_variable = {
                		var = var_state_population
                		value = temp_var_overflow_difference
                	}

                    
                }

                #For some reason, the actual value to variable translation is slightly inaccurate. This helps bring it a bit closer to the real value
                multiply_variable = {
                    var = var_state_population
                    value = 0.999
                }

                #Delete the variables used in calculation
                clear_variable = var_overflow_warning
                #clear_variable = mod_one_state_population

                #Add this to the total population of the country
                add_to_variable = {
                	var = PREV.total_population
                	value = var_state_population
                }
            }

            #When doing big calculations, country pops need to be downsized to avoid overflows. Taking off 3 digits should do the job.
            set_variable = {
                var = big_calcs_country_pop
                value = total_population
            }

            multiply_variable = { big_calcs_country_pop = 0.001 }

            add_to_variable = {
                var = global.global_pop
                value = big_calcs_country_pop
            }

            if = {
                limit = {
                    NOT = {
                        has_idea = pre_industrial_era
                    }
                }
                add_to_variable = {
                    var = global.global_industrial_pop
                    value = big_calcs_country_pop
                }
            }

            if = {
                limit = {
                    has_idea = pre_industrial_era
                }
                add_to_variable = {
                    var = global.global_agrarian_pop
                    value = big_calcs_country_pop
                }
            }
        }
